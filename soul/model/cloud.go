package model

/*
	All core services interacts with each other via pub/sub architecture, then know nothing about another part of system.
	I'm using postgres NOTIFY/LISTEN, but any external transport suitable.
	There are two types of events: PRAY (request something) and GIFT (give needed in current pray).
	Some core services need items, another core services provide these items.

	When core-service make PRAY, it doesn't know who will answer him.
	Core-service, who give GIFT, doesn't know who need this gift.

	All events must be json-compliant.
*/

type Pray interface{}
type Gift interface{}

/*
IdeaPray + IdeaGift
Ideas - are text representation of idea of painting. It's caption of painting.
Any painting starts from initial idea (generated by neural network). Another neural network will paint something according to this idea.
Example: Michelangelo created fresco painting "The Creation of Adam". Caption "The Creation of Adam" is the IDEA of whole work.

Ideas prayer = artchitector core-service (it controls whole flow)
Ideas giver = conceptor core-service
*/
type IdeaPray struct {
}

type IdeaGift struct {
	Idea string
}
